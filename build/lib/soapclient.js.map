{
  "version": 3,
  "sources": ["../../src/lib/soapclient.ts"],
  "sourcesContent": ["/*\n    Mostly based on the work of bikerp, see: https://github.com/bikerp/dsp-w215-hnap\n    Modifications to fit newer firmware and be used as library by Garfonso.\n\n    Control of Sirens possible because of mtfluds work here: https://github.com/mtflud/DCH-S220-Web-Control\n\n    The MIT License (MIT)\n\n    Copyright (c) 2015 bikerp\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nimport * as crypto from 'crypto';\nimport axios from 'axios';\nimport {DOMParser} from '@xmldom/xmldom';\nimport http from 'http';\nimport {SoapClientInterface} from './Clients';\n\nconst HNAP1_XMLNS = 'http://purenetworks.com/HNAP1/';\n//const HNAP_METHOD = 'POST';\n//const HNAP_BODY_ENCODING = 'UTF8';\nconst HNAP_LOGIN_METHOD = 'Login';\n\nclass HNAP_ERROR extends Error {\n    errno: number;\n    code: number;\n    body: string;\n    constructor(message: string, errno : number, body: string, code = -1) {\n        super(message);\n        this.errno = errno;\n        this.code = code >= 0 ? code : errno;\n        this.body = body;\n    }\n}\n\n/**\n * Encrypt stuff like we need it with HNAP. No clue, what I am doing here. Ignore name of parameters. ;-)\n * @param key\n * @param challenge\n */\nfunction hmac(key : string, challenge : string): string {\n    return crypto.createHmac('md5', key).update(challenge).digest('hex').toUpperCase();\n}\n\n/**\n * Creates a soapClient.\n * @param opt - parameters, must have url, user and password.\n */\nexport const soapClient = function (opt = { url: '', user: '', password: ''}) : SoapClientInterface {\n    const HNAP_AUTH = {\n        url: opt.url || '',\n        user: opt.user || '',\n        pwd: opt.password || '',\n        result: '',\n        challenge: '',\n        publicKey: '',\n        cookie: '',\n        privateKey: ''\n    };\n    //console.debug('New Soapclient with options ', opt);\n\n    const agent = new http.Agent({\n        keepAlive: true,\n        //maxSockets: 1,\n        keepAliveMsecs: 60000,\n        timeout: 10000\n    });\n\n    //extract tokens from login response into HNAP_AUTH object\n    function save_login_result(body : string) : void {\n        const doc = new DOMParser().parseFromString(body);\n        if (doc) {\n            HNAP_AUTH.result = doc.getElementsByTagName(HNAP_LOGIN_METHOD + 'Result')!.item(0)!.firstChild!.nodeValue!;\n            HNAP_AUTH.challenge = doc.getElementsByTagName('Challenge')!.item(0)!.firstChild!.nodeValue!;\n            HNAP_AUTH.publicKey = doc.getElementsByTagName('PublicKey')!.item(0)!.firstChild!.nodeValue!;\n            HNAP_AUTH.cookie = doc.getElementsByTagName('Cookie')!.item(0)!.firstChild!.nodeValue!;\n            HNAP_AUTH.privateKey = hmac(HNAP_AUTH.publicKey + HNAP_AUTH.pwd, HNAP_AUTH.challenge);\n        }\n    }\n\n    function loginRequest() : string {\n        return '<Action>request</Action>'\n            + '<Username>' + HNAP_AUTH.user + '</Username>'\n            + '<LoginPassword></LoginPassword>'\n            + '<Captcha></Captcha>';\n    }\n\n    function loginParameters() : string {\n        const login_pwd = hmac(HNAP_AUTH.privateKey, HNAP_AUTH.challenge);\n        return '<Action>login</Action>'\n            + '<Username>' + HNAP_AUTH.user + '</Username>'\n            + '<LoginPassword>' + login_pwd + '</LoginPassword>'\n            + '<Captcha></Captcha>';\n    }\n\n    function requestBody(method : string, parameters : string) : string {\n        return '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n            '<soap:Envelope ' +\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' +\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" ' +\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">' +\n            '<soap:Body>' +\n            '<' + method + ' xmlns=\"' + HNAP1_XMLNS + '\">' +\n            parameters +\n            '</' + method + '>' +\n            '</soap:Body></soap:Envelope>';\n    }\n\n    /**\n     *\n     * @param method\n     * @param responseElement\n     * @param body\n     * @param {boolean} [fullBody] if true will return fullBody xml instead of only result value.\n     * @returns {Promise<any>}\n     */\n    function soapAction(method : string, responseElement : string | Array<string>, body : string, fullBody = false) : Promise<string | number | boolean | Array<string> | Record<string, string>> {\n        //console.log('Sending Body ' + body);\n        return axios.post(HNAP_AUTH.url, body,\n            {\n                headers: {\n                    'Content-Type': 'text/xml; charset=utf-8',\n                    'SOAPAction': '\"' + HNAP1_XMLNS + method + '\"',\n                    'HNAP_AUTH': getHnapAuth('\"' + HNAP1_XMLNS + method + '\"', HNAP_AUTH.privateKey),\n                    'cookie': 'uid=' + HNAP_AUTH.cookie\n                },\n                timeout: 10000, //timeout in ms\n                httpAgent: agent\n            }).then(function (response) {\n            const incomingBody = response.data;\n            if (response.status === 403) {\n                throw new HNAP_ERROR('Unauthorized, need to login.', 403, incomingBody);\n            }\n            console.debug('StatusCode: ' + response.status + ' Body: ' + incomingBody);\n            if (fullBody) { //return full body if requested.\n                return incomingBody;\n            }\n            const result = readResponseValue(incomingBody, method + 'Result');\n            if (typeof result === 'string' && result.toUpperCase() === 'ERROR') {\n                throw new HNAP_ERROR(\n                    'Request not successful. Probably need to login again. Status: ' + response.status,\n                    response.status, incomingBody, response.status < 300 ? 403 : response.status);\n            }\n            return readResponseValue(incomingBody, responseElement);\n        }).catch(function (err) {\n            console.log('error during soapaction:', err);\n            throw err;\n        });\n    }\n\n    function moduleParameters(module : string | number) : string {\n        return '<ModuleID>' + module + '</ModuleID>';\n    }\n\n    function controlParameters(module : string | number, status : string | boolean) : string {\n        return moduleParameters(module) +\n            '<NickName>Socket 1</NickName><Description>Socket 1</Description>' +\n            '<OPStatus>' + status + '</OPStatus><Controller>1</Controller>';\n    }\n\n    /**\n     * Create parameters for SetPlaySound request\n     * @param [soundnum] should be one of the string from getSounds 1-6\n     * @param [volume] 1-100\n     * @param [duration] 1-88888 (with 88888 = infinite)\n     * @returns {string}\n     */\n    function soundParameters(soundnum? : number, volume? : number, duration? : number) : string {\n        let params = `<ModuleID>1</ModuleID>\n                     <Controller>1</Controller>`;\n        if (soundnum !== undefined) {\n            params += `<SoundType>${soundnum}</SoundType>`;\n        }\n        if (volume !== undefined) {\n            params += `<Volume>${volume}</Volume>`;\n        }\n        if (duration !== undefined) {\n            params += `<Duration>${duration}</Duration>`;\n        }\n        return params;\n    }\n\n    /**\n     * Returns an Object of possible sounds with LABELS and the numbers they translate in.\n     * @returns {{EMERGENCY: number, DOOR_CHIME: number, BEEP: number, AMBULANCE: number, FIRE: number, POLICE: number}}\n     */\n    /*function getSounds() : {EMERGENCY: number, DOOR_CHIME: number, BEEP: number, AMBULANCE: number, FIRE: number, POLICE: number} {\n        return {\n            EMERGENCY: 1,\n            FIRE: 2,\n            AMBULANCE: 3,\n            POLICE: 4,\n            DOOR_CHIME: 5,\n            BEEP: 6\n        };\n    }*/\n\n    /*\n       unused stuff\n    function radioParameters(radio : string) : string {\n        return '<RadioID>' + radio + '</RadioID>';\n    }\n    function APClientParameters() : string {\n        return '<Enabled>true</Enabled>' +\n            '<RadioID>RADIO_2.4GHz</RadioID>' +\n            '<SSID>My_Network</SSID>' +\n            '<MacAddress>XX:XX:XX:XX:XX:XX</MacAddress>' +\n            '<ChannelWidth>0</ChannelWidth>' +\n            '<SupportedSecurity>' +\n            '<SecurityInfo>' +\n            '<SecurityType>WPA2-PSK</SecurityType>' +\n            '<Encryptions>' +\n            '<string>AES</string>' +\n            '</Encryptions>' +\n            '</SecurityInfo>' +\n            '</SupportedSecurity>' +\n            '';//'<Key>' + AES.AES_Encrypt128('password', HNAP_AUTH.privateKey) + '</Key>'; //TODO: commented out.. do I need that at all??\n    }\n\n    function groupParameters(group : string | number) : string {\n        return '<ModuleGroupID>' + group + '</ModuleGroupID>';\n    }\n    function temperatureSettingsParameters(module : string | number) : string {\n        return moduleParameters(module) +\n            '<NickName>TemperatureMonitor 3</NickName>' +\n            '<Description>Temperature Monitor 3</Description>' +\n            '<UpperBound>80</UpperBound>' +\n            '<LowerBound>Not Available</LowerBound>' +\n            '<OPStatus>true</OPStatus>';\n    }\n    function powerWarningParameters() : string {\n        return '<Threshold>28</Threshold>' +\n            '<Percentage>70</Percentage>' +\n            '<PeriodicType>Weekly</PeriodicType>' +\n            '<StartTime>1</StartTime>';\n    }\n     */\n\n    function getHnapAuth(SoapAction : string, privateKey : string) : string {\n        const current_time = new Date();\n        const time_stamp = Math.round(current_time.getTime() / 1000);\n        const auth = hmac(privateKey,time_stamp + SoapAction);\n        return auth + ' ' + time_stamp;\n    }\n\n    function readResponseValue(body : string, elementName : string | Array<string>) : string | number | boolean | Array<string> | Record<string, string> | undefined {\n        if (typeof elementName === 'object' && typeof elementName.forEach === 'function') { //sloppy isArray check.\n            const results = {} as Record<string, string>;\n            elementName.forEach(function (elemName : string): void {\n                results[elemName] = readResponseValue(body, elemName) as string;\n            });\n            return results;\n        } else {\n            if (body && elementName && typeof elementName === 'string') {\n                const doc = new DOMParser().parseFromString(body);\n                const node = doc.getElementsByTagName(elementName).item(0);\n                // Check that we have children of node.\n                //if (elementName === 'ModuleTypes') {\n                //    console.debug('node: ', node, ' firstChild: ', node.firstChild, ' nodeValue: ', node.firstChild.nodeValue);\n                //    console.debug('Content: ', node.textContent);\n                //}\n                const result = (node && node.firstChild) ? node.firstChild.nodeValue : 'ERROR';\n                if (result === null) { //array of values requested like Module Types or SOAP Actions:\n                    const results = [] as Array<string>;\n                    //console.debug('Have array:', node);\n                    Object.keys(node!.childNodes).forEach(function (value : string, key : number) {\n                        const child = node!.childNodes[key];\n                        //console.debug('Child:', child);\n                        if (child && child.firstChild) {\n                            results.push(child.firstChild.nodeValue as string);\n                        }\n                    });\n                    return results;\n                } else {\n                    return result;\n                }\n            }\n        }\n    }\n\n    function login() : Promise<boolean> {\n        //console.log('Sending Body ' + loginRequest());\n        return axios.post(HNAP_AUTH.url,\n            requestBody(HNAP_LOGIN_METHOD, loginRequest()),\n            { //first request challenge and stuff\n                headers: {\n                    'Content-Type': 'text/xml; charset=utf-8',\n                    'SOAPAction': '\"' + HNAP1_XMLNS + HNAP_LOGIN_METHOD + '\"',\n                    'connection': 'keep-alive'\n                },\n                timeout: 10000,\n                httpAgent: agent\n            }).then(function (response) { //then log in with the information gathered in first request\n            //save keys.\n            //console.log('Login request came back: ', response);\n            //console.log('Body: ', response.data);\n            save_login_result(response.data);\n            //console.log('Got results: ', HNAP_AUTH);\n            //will return 'success' if worked.\n            return soapAction(HNAP_LOGIN_METHOD, 'LoginResult',\n                requestBody(HNAP_LOGIN_METHOD, loginParameters()));\n        }).then((result) => {\n            return result === 'success';\n        }).catch(function (err) {\n            //throw error here, so we can react to it outside (?)\n            console.log('error during HNAP login:', err);\n            throw err;\n        });\n    }\n\n    /**\n     * Get full device description XMLs -> used to support new devices.\n     * @returns {Promise<unknown>}\n     */\n    async function getDeviceDescriptionXML() : Promise<{deviceSettingsXML: string, modulesSoapActions: string}> {\n        return {\n            deviceSettingsXML: await soapAction('GetDeviceSettings',\n                'Result',\n                requestBody('GetDeviceSettings', ''), true) as string,\n            modulesSoapActions: await soapAction('GetModuleSOAPActions',\n                'SOAPActions',\n                requestBody('GetModuleSOAPActions', moduleParameters('0')), true) as string\n        }; //get full body of DeviceSettings\n    }\n\n    //API:\n    return {\n        login: login,\n\n        disconnect: function () {\n            agent.destroy();\n        },\n\n        /**\n         * Switches Plug\n         * @param {boolean} on target status\n         * @returns {Promise<*>}\n         */\n        switch: function (on : boolean) : Promise<boolean> {\n            return soapAction('SetSocketSettings', 'SetSocketSettingsResult', requestBody('SetSocketSettings', controlParameters(1, on))) as Promise<boolean>\n        },\n\n        //polls current state\n        state: async function () {\n            const val = await soapAction('GetSocketSettings', 'OPStatus', requestBody('GetSocketSettings', moduleParameters(1)));\n            return val === 'true';\n        },\n\n        //polls last detection\n        lastDetection: async function () {\n            const result = await soapAction('GetLatestDetection', 'LatestDetectTime', requestBody('GetLatestDetection', moduleParameters(1))) as number;\n            return result * 1000;\n        },\n\n        //polls power consumption\n        consumption: async function () {\n            const result = await soapAction('GetCurrentPowerConsumption', 'CurrentConsumption', requestBody('GetCurrentPowerConsumption', moduleParameters(2)));\n            return Number(result);\n        },\n\n        //polls total power consumption\n        totalConsumption: async function () {\n            const result = await soapAction('GetPMWarningThreshold', 'TotalConsumption', requestBody('GetPMWarningThreshold', moduleParameters(2)));\n            return Number(result);\n        },\n\n        //polls current temperature\n        temperature: async function () {\n            const result = await soapAction('GetCurrentTemperature', 'CurrentTemperature', requestBody('GetCurrentTemperature', moduleParameters(3)));\n            return Number(result);\n        },\n\n        //returns model name and firmware version. Could be very interesting for supporting additional devices.\n        //also useful to know which states to create for a device (i.e. plug or motion detection)\n        getDeviceSettings: function () : Promise<Record<string, string>> {\n            return soapAction('GetDeviceSettings',\n                [\n                    'GetDeviceSettingsResult',\n                    'DeviceMacId',\n                    'ModelName',\n                    'ModelDescription',\n                    'HardwareVersion',\n                    'FirmwareVersion',\n                    'PresentationURL',\n                    'ModuleTypes' //not yet helpfully implemented. Hm\n                ],\n                requestBody('GetDeviceSettings', '')) as Promise<Record<string, string>>;\n        },\n\n        //reboot device\n        reboot: function () : Promise<boolean> {\n            return soapAction('Reboot', 'RebootResult', requestBody('Reboot', '')) as Promise<boolean>;\n        },\n\n        /**\n         * Returns true if device is ready.\n         * @returns {Promise<boolean>}\n         */\n        isDeviceReady: async function () {\n            const result = await soapAction('IsDeviceReady', 'IsDeviceReadyResult', requestBody('IsDeviceReady', ''));\n            return result === 'OK';\n        },\n\n        setSoundPlay: function (sound : number, volume : number, duration : number) : Promise<boolean> {\n            return soapAction('SetSoundPlay', 'SetSoundPlayResult', requestBody('SetSoundPlay', soundParameters(sound, volume, duration))) as Promise<boolean>;\n        },\n\n        setAlarmDismissed: function () : Promise<boolean> {\n            return soapAction('SetAlarmDismissed', 'SetAlarmDismissedResult', requestBody('SetAlarmDismissed', soundParameters())) as Promise<boolean>;\n        },\n\n        getSoundPlay: async function () {\n            const result = await soapAction('GetSirenAlarmSettings', 'IsSounding', requestBody('GetSirenAlarmSettings', soundParameters()));\n            return result === 'true';\n        },\n\n        getDeviceDescriptionXML: getDeviceDescriptionXML,\n\n        //getSounds: getSounds\n\n        /* unused stuff.\n        //gets information about Wi-Fi\n        getAPClientSettings: function () {\n            return soapAction('GetAPClientSettings', 'GetAPClientSettingsResult', requestBody('GetAPClientSettings', radioParameters('RADIO_2.4GHz')));\n        },\n\n        //set power warning?\n        setPowerWarning: function () {\n            return soapAction('SetPMWarningThreshold', 'SetPMWarningThresholdResult', requestBody('SetPMWarningThreshold', powerWarningParameters()));\n        },\n\n        //poll power warning\n        getPowerWarning: function () {\n            return soapAction('GetPMWarningThreshold', 'GetPMWarningThresholdResult', requestBody('GetPMWarningThreshold', moduleParameters(2)));\n        },\n\n        //not very interesting, returns timezone and set locale.\n        getDeviceSettings2: function () {\n            return soapAction('GetDeviceSettings2', 'GetDeviceSettings2Result', requestBody('GetDeviceSettings2', ''));\n        },\n\n        getTemperatureSettings: function () {\n            return soapAction('GetTempMonitorSettings', 'GetTempMonitorSettingsResult', requestBody('GetTempMonitorSettings', moduleParameters(3)));\n        },\n\n        setTemperatureSettings: function () {\n            return soapAction('SetTempMonitorSettings', 'SetTempMonitorSettingsResult', requestBody('SetTempMonitorSettings', temperatureSettingsParameters(3)));\n        },\n\n        getSiteSurvey: function () {\n            return soapAction('GetSiteSurvey', 'GetSiteSurveyResult', requestBody('GetSiteSurvey', radioParameters('RADIO_2.4GHz')));\n        },\n\n        triggerWirelessSiteSurvey: function () {\n            return soapAction('SetTriggerWirelessSiteSurvey', 'SetTriggerWirelessSiteSurveyResult', requestBody('SetTriggerWirelessSiteSurvey', radioParameters('RADIO_2.4GHz')));\n        },\n\n        getModuleSchedule: function () {\n            return soapAction('GetModuleSchedule', 'GetModuleScheduleResult', requestBody('GetModuleSchedule', moduleParameters(0)));\n        },\n\n        getModuleEnabled: function () {\n            return soapAction('GetModuleEnabled', 'GetModuleEnabledResult', requestBody('GetModuleEnabled', moduleParameters(0)));\n        },\n\n        getModuleGroup: function () {\n            return soapAction('GetModuleGroup', 'GetModuleGroupResult', requestBody('GetModuleGroup', groupParameters(0)));\n        },\n\n        //get actions supported by module\n        getModuleSOAPActions: function (module = 0) {\n            return soapAction('GetModuleSOAPActions', 'SOAPActions', requestBody('GetModuleSOAPActions', moduleParameters(module)));\n        },\n\n        getMotionDetectorSettings: function(module = 1) {\n            return soapAction('GetMotionDetectorSettings', 'GetMotionDetectorSettingsResult', requestBody('GetMotionDetectorSettings', moduleParameters(module)));\n        },\n\n        getScheduleSettings: function () {\n            return soapAction('GetScheduleSettings', 'GetScheduleSettingsResult', requestBody('GetScheduleSettings', ''));\n        },\n\n        setFactoryDefault: function () {\n            return soapAction('SetFactoryDefault', 'SetFactoryDefaultResult', requestBody('SetFactoryDefault', ''));\n        },\n\n        getWLanRadios: function () {\n            return soapAction('GetWLanRadios', 'GetWLanRadiosResult', requestBody('GetWLanRadios', ''));\n        },\n\n        getInternetSettings: function () {\n            return soapAction('GetInternetSettings', 'GetInternetSettingsResult', requestBody('GetInternetSettings', ''));\n        },\n\n        setAPClientSettings: function () {\n            return soapAction('SetAPClientSettings', 'SetAPClientSettingsResult', requestBody('SetAPClientSettings', APClientParameters()));\n        },\n\n        settriggerADIC: function () {\n            return soapAction('SettriggerADIC', 'SettriggerADICResult', requestBody('SettriggerADIC', ''));\n        },\n        */\n    };\n};\n\nexport default soapClient;\n\n"],
  "mappings": "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",
  "names": ["http", "axios", "module"]
}
