{
  "version": 3,
  "sources": ["../../src/lib/DeviceFactory.ts"],
  "sourcesContent": ["\nimport { Mydlink } from './mydlink';\nimport {Device, processNetworkError, WrongMacError, WrongModelError} from './Device';\nimport { TableDevice } from './TableDevice';\nimport { KnownDevices } from './KnownDevices';\nimport {WebSocketDevice} from './WebSocketDevice';\nimport {SoapDevice} from './soapDevice';\n\nfunction deviceObjetToTableDevice(configDevice: ioBroker.DeviceObject) : TableDevice {\n    return {\n        name: configDevice.native.name,\n        mac: configDevice.native.mac,\n        ip: configDevice.native.ip,\n        pin: configDevice.native.pin,\n        pollInterval: configDevice.native.pollInterval,\n        enabled: configDevice.native.enabled,\n    }\n}\nasync function sendModelInfoToSentry(adapter : Mydlink, model : string, xmls: Record<string, string>) : Promise<void> {\n    if (!KnownDevices[model]) {\n        //unknown device -> report to sentry.\n        adapter.log.info('Found new device, please report the following (full log from file, please) to developer: ' + JSON.stringify(xmls, null, 2));\n        if (adapter.supportsFeature && adapter.supportsFeature('PLUGINS')) {\n            const sentryInstance = adapter.getPluginInstance('sentry');\n            if (sentryInstance) {\n                const Sentry = sentryInstance.getSentryObject();\n                if (Sentry) {\n                    Sentry.withScope((scope : any) => {\n                        scope.setLevel('info');\n                        for (const key of Object.keys(xmls)) {\n                            scope.setExtra(key, xmls[key]);\n                        }\n                        Sentry.captureMessage('Unknown-Device ' + model, 'info'); // Level 'info'\n                    });\n                }\n            }\n        }\n    }\n}\n\n/**\n * Create DeviceInfo from ioBroker object, old createDeviceFromConfig (model known)\n * @param adapter ioBroker Adapter\n * @param configDevice ioBroker device object\n * @returns Promise<Device>\n */\nexport async function createFromObject(adapter : Mydlink, configDevice: ioBroker.DeviceObject) : Promise<Device> {\n    const native = configDevice.native;\n    const pinEncrypted = (native.mac && !native.pinNotEncrypted);\n    if (native.model) {\n        return createDevice(adapter, {\n            ip: native.ip,\n            pin: native.pin,\n            pinEncrypted,\n            model: native.model,\n            mac: native.mac,\n            id: configDevice._id.split('.')[2],\n            name: native.name,\n            enabled: native.enabled,\n            isWebsocket: native.useWebsocket\n        });\n    } else {\n        adapter.log.info(`Model still unknown for ${native.name}. Trying to identify.`);\n        return createFromTable(adapter, deviceObjetToTableDevice(configDevice), pinEncrypted, native.useWebsocket);\n    }\n}\n\n/**\n * Create a device with model known.\n * @param adapter\n * @param params\n */\nexport async function createDevice(adapter: Mydlink, params : {\n    ip: string, pin: string, pinEncrypted: boolean, model: string,\n    pollInterval?: number, mac?: string, id?: string,\n    isWebsocket?: boolean, name?: string, enabled?: boolean}) : Promise<Device> {\n\n    let device;\n    const deviceFlags = KnownDevices[params.model];\n    if (deviceFlags) {\n        device = new deviceFlags.DeviceType(adapter, params.ip, params.pin, params.pinEncrypted);\n    } else {\n        adapter.log.info(`Unknown device type ${params.model} for ${params.name}.`);\n        let info;\n        if (params.isWebsocket) {\n            device = new WebSocketDevice(adapter, params.ip, params.pin, params.pinEncrypted);\n            info = {info: 'UNKNOWN WEBSOCKET DEVICE: ' + params.model};\n        } else {\n            device = new SoapDevice(adapter, params.ip, params.pin, params.pinEncrypted);\n            info = await device.client.getDeviceDescriptionXML();\n        }\n        await sendModelInfoToSentry(adapter, params.model, info);\n    }\n    device.pollInterval = device.pollInterval || params.pollInterval;\n    device.mac = device.mac || params.mac;\n    device.id = device.id || params.id;\n    if (!device.id) {\n        device.idFromMac();\n    }\n    device.name = device.name || params.name;\n    device.model = params.model;\n    device.enabled = device.enabled || params.enabled;\n    device.isWebsocket = device.isWebsocket || params.isWebsocket;\n    return device;\n}\n\n/**\n * Creates DeviceInfo from configuration-Table object (model unknown).\n * @param adapter ioBroker Adapter\n * @param tableDevice\n * @param [doDecrypt] do we need to decrypt the PIN?\n * @param [forceWebsocket] force usage of websocket device. Set to true, if soap already failed.\n * @returns @returns Promise<Device>\n */\nexport async function createFromTable(adapter : Mydlink, tableDevice: TableDevice, doDecrypt = false, forceWebsocket = false) : Promise<Device> {\n    const pinEncrypted = (doDecrypt && Boolean(tableDevice.mac));\n    const mac = tableDevice.mac ? tableDevice.mac.toUpperCase() : '';\n\n    let device;\n    //first try soap:\n    if (!forceWebsocket) {\n        device = new SoapDevice(adapter, tableDevice.ip, tableDevice.pin, pinEncrypted);\n    } else {\n        device = new WebSocketDevice(adapter, tableDevice.ip, tableDevice.pin, pinEncrypted);\n    }\n\n    device.mac = mac;\n    device.pollInterval = tableDevice.pollInterval !== undefined && isFinite(Number(tableDevice.pollInterval)) && tableDevice.pollInterval >= 0 ? Number(tableDevice.pollInterval) : 30000;\n    if (device.mac) {\n        device.idFromMac();\n    }\n    device.name = tableDevice.name || device.name;\n    device.enabled = tableDevice.enabled !== undefined ? tableDevice.enabled : device.enabled;\n\n    try {\n        await device.login();\n        if (device.loggedIn) {\n            //ok, login worked. -> seems to be soap device, identify:\n            await device.identify();\n        } else {\n            throw new Error('Device not logged in... why?');\n        }\n    } catch (e: any) {\n        device.stop(); //stop old device in any case!\n        const code = processNetworkError(e);\n        if (!forceWebsocket && (code === 500 || code === 'ECONNREFUSED')) { //try websocket.\n            return createFromTable(adapter, tableDevice, doDecrypt, true);\n        }\n\n        if (e.name === WrongModelError.name) {\n            //model was wrong -> recreate with new model information.\n            adapter.log.debug(`Found ${device.model} for ${device.name}. Create a fitting device.`);\n            return createDevice(adapter, {\n                model: device.model,\n                ip: device.ip,\n                pinEncrypted: false,\n                pin: device.pinDecrypted,\n                name: device.name,\n                mac: device.mac,\n                pollInterval: device.pollInterval,\n                id: device.id,\n                isWebsocket: device.isWebsocket,\n                enabled: device.enabled\n            });\n        }\n\n        if (e.name === WrongMacError.name) {\n            adapter.log.info(`Device with unexpected MAC ${device.mac} reacted on ${device.ip}. Trying to create new device object for it.`);\n            if (device.model) {\n                return createDevice(adapter, {\n                    model: device.model,\n                    ip: device.ip,\n                    pinEncrypted: false,\n                    pin: device.pinDecrypted,\n                    name: device.name,\n                    mac: device.mac,\n                    pollInterval: device.pollInterval,\n                    id: device.id,\n                    isWebsocket: device.isWebsocket,\n                    enabled: device.enabled\n                });\n            } else {\n                return createFromTable(adapter, {\n                    mac: device.mac,\n                    ip: device.ip,\n                    pin: device.pinDecrypted,\n                    name: device.name,\n                    pollInterval: device.pollInterval,\n                    enabled: device.enabled\n                })\n            }\n        }\n\n        adapter.log.debug('Login error: ' + e.stack);\n        if (!device.loginErrorPrinted && e.code !== 'ETIMEDOUT' && e.code !== 'ECONNABORTED' && e.code !== 'ECONNRESET') {\n            adapter.log.error(tableDevice.name + ' could not login. Please check credentials and if device is online/connected. Error: ' + e.code + ' - ' + e.stack);\n            device.loginErrorPrinted = true;\n        }\n\n        device.loggedIn = false;\n    }\n\n    return device;\n}\n"],
  "mappings": "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",
  "names": []
}
