{
  "version": 3,
  "sources": ["../../src/lib/soapDevice.ts"],
  "sourcesContent": ["\nimport { Device } from './Device';\nimport {Suffixes} from './suffixes';\nimport {SoapClient} from './Clients';\nimport {Mydlink} from '../main';\n\nexport class SoapDevice extends Device {\n    client: SoapClient;\n\n    constructor(adapter : Mydlink, ip: string, pin: string, pinEncrypted: boolean) {\n        super(adapter, ip, pin, pinEncrypted);\n        this.client = new SoapClient();\n    }\n}\n\nexport class SoapSwitch extends SoapDevice {\n    //currently only know DSP-W215 as soap switch which has all those.\n    hasTemp = true;\n    hasPower = true;\n    hasTotalPower = true;\n\n    /**\n     * Do polling here.\n     * @returns {Promise<void>}\n     */\n    async onInterval() : Promise<void> {\n        await super.onInterval();\n        // if not ready -> communication did fail, will be retried on next poll.\n        if (this.ready) {\n            //check switch status:\n            const val = await this.client.state() as boolean;\n            await this.adapter.setStateChangedAsync(this.id + Suffixes.state, val, true);\n\n            if (this.hasTemp) {\n                const temp = await this.client.temperature();\n                await this.adapter.setStateChangedAsync(this.id + Suffixes.temperature, temp, true);\n            }\n            if (this.hasPower) {\n                const power = await this.client.consumption();\n                await this.adapter.setStateChangedAsync(this.id + Suffixes.power, power, true);\n            }\n            if (this.hasTotalPower) {\n                const totalPower = await this.client.totalConsumption();\n                await this.adapter.setStateChangedAsync(this.id + Suffixes.power, totalPower, true);\n            }\n        }\n    }\n}\n\nexport class SoapMotionDetector extends SoapDevice {\n    /**\n     * Do polling here.\n     * @returns {Promise<void>}\n     */\n    async onInterval() : Promise<void> {\n        await super.onInterval();\n        // if not ready -> communication did fail, will be retried on next poll.\n        if (this.ready) {\n            const lastDetection = await this.client.lastDetection();\n            const result = await this.adapter.setStateChangedAsync(this.id + Suffixes.lastDetected, lastDetection, true);\n            if (!result.notChanged) {\n                //timestamp did change -> we had a detection!\n                await this.adapter.setStateAsync(this.id + Suffixes.state, true, true);\n            } else {\n                await this.adapter.setStateChangedAsync(this.id + Suffixes.state, false, true);\n            }\n            const noMotion = Math.round((Date.now() - lastDetection) / 1000);\n            await this.adapter.setStateChangedAsync(this.id + Suffixes.noMotion, noMotion, true);\n        }\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAuB;AACvB,sBAAuB;AACvB,qBAAyB;AAGlB,MAAM,mBAAmB,qBAAO;AAAA,EAGnC,YAAY,SAAmB,IAAY,KAAa,cAAuB;AAC3E,UAAM,SAAS,IAAI,KAAK,YAAY;AACpC,SAAK,SAAS,IAAI,0BAAW;AAAA,EACjC;AACJ;AAEO,MAAM,mBAAmB,WAAW;AAAA,EAApC;AAAA;AAEH,mBAAU;AACV,oBAAW;AACX,yBAAgB;AAAA;AAAA,EAMhB,MAAM,aAA6B;AAC/B,UAAM,MAAM,WAAW;AAEvB,QAAI,KAAK,OAAO;AAEZ,YAAM,MAAM,MAAM,KAAK,OAAO,MAAM;AACpC,YAAM,KAAK,QAAQ,qBAAqB,KAAK,KAAK,yBAAS,OAAO,KAAK,IAAI;AAE3E,UAAI,KAAK,SAAS;AACd,cAAM,OAAO,MAAM,KAAK,OAAO,YAAY;AAC3C,cAAM,KAAK,QAAQ,qBAAqB,KAAK,KAAK,yBAAS,aAAa,MAAM,IAAI;AAAA,MACtF;AACA,UAAI,KAAK,UAAU;AACf,cAAM,QAAQ,MAAM,KAAK,OAAO,YAAY;AAC5C,cAAM,KAAK,QAAQ,qBAAqB,KAAK,KAAK,yBAAS,OAAO,OAAO,IAAI;AAAA,MACjF;AACA,UAAI,KAAK,eAAe;AACpB,cAAM,aAAa,MAAM,KAAK,OAAO,iBAAiB;AACtD,cAAM,KAAK,QAAQ,qBAAqB,KAAK,KAAK,yBAAS,OAAO,YAAY,IAAI;AAAA,MACtF;AAAA,IACJ;AAAA,EACJ;AACJ;AAEO,MAAM,2BAA2B,WAAW;AAAA,EAK/C,MAAM,aAA6B;AAC/B,UAAM,MAAM,WAAW;AAEvB,QAAI,KAAK,OAAO;AACZ,YAAM,gBAAgB,MAAM,KAAK,OAAO,cAAc;AACtD,YAAM,SAAS,MAAM,KAAK,QAAQ,qBAAqB,KAAK,KAAK,yBAAS,cAAc,eAAe,IAAI;AAC3G,UAAI,CAAC,OAAO,YAAY;AAEpB,cAAM,KAAK,QAAQ,cAAc,KAAK,KAAK,yBAAS,OAAO,MAAM,IAAI;AAAA,MACzE,OAAO;AACH,cAAM,KAAK,QAAQ,qBAAqB,KAAK,KAAK,yBAAS,OAAO,OAAO,IAAI;AAAA,MACjF;AACA,YAAM,WAAW,KAAK,OAAO,KAAK,IAAI,IAAI,iBAAiB,GAAI;AAC/D,YAAM,KAAK,QAAQ,qBAAqB,KAAK,KAAK,yBAAS,UAAU,UAAU,IAAI;AAAA,IACvF;AAAA,EACJ;AACJ;",
  "names": []
}
