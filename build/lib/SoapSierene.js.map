{
  "version": 3,
  "sources": ["../../src/lib/SoapSierene.ts"],
  "sourcesContent": ["//Control of Sirens possible because of mtfluds work here: https://github.com/mtflud/DCH-S220-Web-Control\nimport {Suffixes} from './suffixes';\nimport {SoapDevice} from './soapDevice';\n\nexport class SoapSiren extends SoapDevice {\n    soundToPlay = 1;\n    volume = 100;\n    duration = 10;\n\n    /**\n     * process a state change. Device will just try to switch plug. Children will have to overwrite this behaviour.\n     * @param id\n     * @param state\n     */\n    async handleStateChange(id : string, state : ioBroker.State) : Promise<void> {\n        await super.handleStateChange(id, state);\n\n        if (id.endsWith(Suffixes.state)) {\n            if (typeof state.val === 'boolean') {\n                try {\n                    let newVal;\n                    if (state.val) {\n                        newVal = await this.client.setSoundPlay(this.soundToPlay, this.volume, this.duration);\n                    } else {\n                        newVal = !(await this.client.setAlarmDismissed());\n                    }\n                    await this.adapter.setStateAsync(id, newVal, true);\n                } catch(e: any) {\n                    await this.handleNetworkError(e);\n                }\n            } else {\n                this.adapter.log.warn('Wrong state type. Only boolean accepted for switch.');\n            }\n        } else {\n            if (id.endsWith(Suffixes.soundType)) {\n                if (typeof state.val === 'number' && state.val >= 1 && state.val <= 6) {\n                    this.soundToPlay = state.val;\n                } else {\n                    this.adapter.log.warn(`Wrong value ${state.val} for sound. Expected number in range 1-6 for ${id}`);\n                }\n            } else if (id.endsWith(Suffixes.soundVolume)) {\n                if (typeof state.val === 'number' && state.val >= 1 && state.val <= 100) {\n                    this.volume = state.val;\n                } else {\n                    this.adapter.log.warn(`Wrong value ${state.val} for volume. Expected number in range 1-100 for ${id}`);\n                }\n            } else if (id.endsWith(Suffixes.soundDuration)) {\n                if (typeof state.val === 'number' && state.val >= 1 && state.val <= 88888) {\n                    this.duration = state.val;\n                } else {\n                    this.adapter.log.warn(`Wrong value ${state.val} for duration. Expected number in range 1-88888 (where 88888 means infinite) for ${id}`);\n                }\n            } else {\n                this.adapter.log.warn(`State ${id} set to ${state.val} and ack=false, but can't control anything with it.`);\n            }\n        }\n    }\n\n    /**\n     * Creates objects for the device.\n     */\n    async createObjects() : Promise<void> {\n        await super.createObjects();\n\n        //siren uses \"state\" to switch sirene on/off (or report state)\n        await this.adapter.setObjectNotExistsAsync(this.id + Suffixes.state, {\n            type: 'state',\n            common: {\n                name: 'state of sirene',\n                type: 'boolean',\n                role: 'switch',\n                read: true,\n                write: true\n            },\n            native: {}\n        });\n        await this.adapter.subscribeStatesAsync(this.id + Suffixes.state);\n\n        await this.adapter.setObjectNotExistsAsync(this.id + Suffixes.soundType, {\n            type: 'state',\n            common: {\n                name: 'sound to play on next play',\n                type: 'number',\n                role: 'level.mode.sound',\n                read: true,\n                write: true,\n                min: 1,\n                max: 6,\n                def: 1,\n                states: {\n                    1: 'EMERGENCY', 2: 'FIRE', 3: 'AMBULANCE',\n                    4: 'POLICE', 5: 'DOOR_CHIME', 6: 'BEEP'\n                }\n            },\n            native: {}\n        });\n        await this.adapter.subscribeStatesAsync(this.id + Suffixes.soundType);\n\n        await this.adapter.setObjectNotExistsAsync(this.id + Suffixes.soundVolume, {\n            type: 'state',\n            common: {\n                name: 'volume of sirene on next play',\n                type: 'number',\n                role: 'level.volume',\n                read: true,\n                write: true,\n                min: 1,\n                max: 100,\n                def: 50\n            },\n            native: {}\n        });\n        await this.adapter.subscribeStatesAsync(this.id + Suffixes.soundVolume);\n\n        await this.adapter.setObjectNotExistsAsync(this.id + Suffixes.soundDuration, {\n            type: 'state',\n            common: {\n                name: 'duration of sirene on next play (88888 = infinite)',\n                type: 'number',\n                role: 'level.timer',\n                read: true,\n                write: true,\n                unit: 's',\n                min: 1,\n                max: 88888,\n                def: 60\n            },\n            native: {}\n        });\n        await this.adapter.subscribeStatesAsync(this.id + Suffixes.soundVolume);\n\n        //get initial values:\n        let state = await this.adapter.getStateAsync(this.id + Suffixes.soundType);\n        if (state && state.val !== null && state.val as number >= 0) {\n            this.soundToPlay = state.val as number;\n        }\n        state = await this.adapter.getStateAsync(this.id + Suffixes.soundVolume);\n        if (state && state.val !== null && state.val as number >= 0) {\n            this.volume = state.val as number;\n        }\n        state = await this.adapter.getStateAsync(this.id + Suffixes.soundDuration);\n        if (state && state.val !== null && state.val as number >= 0) {\n            this.duration = state.val as number;\n        }\n    }\n\n    /**\n     * Do polling here.\n     * @returns {Promise<void>}\n     */\n    async onInterval() : Promise<void> {\n        await super.onInterval();\n        // if not ready -> communication did fail, will be retried on next poll.\n        if (this.ready) {\n            //check switch status:\n            try {\n                const val = await this.client.getSoundPlay() as boolean;\n                await this.adapter.setStateChangedAsync(this.id + Suffixes.state, val, true);\n            } catch (e: any) {\n                await this.handleNetworkError(e);\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
