{
  "version": 3,
  "sources": ["../../src/lib/Device.ts"],
  "sourcesContent": ["import { Client } from './Clients';\nimport { DeviceInfo } from './DeviceInfo';\nimport { Suffixes } from './suffixes';\nimport {Mydlink} from './mydlink';\n\nexport class WrongMacError extends Error {\n    name = 'WRONGMAC';\n    constructor(message: string) {\n        super(message);\n    }\n}\n\nexport class WrongModelError extends Error {\n    name = 'WRONGMODEL';\n    constructor(message: string) {\n        super(message);\n    }\n}\n\n/**\n * Get code from network error.\n * @param {Record<string, any>} e\n * @returns {number|string}\n */\nexport function processNetworkError(e: Record<string, any>) : number | string {\n    if (e.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        //See if we are logged out -> login again on next poll.\n        //otherwise ignore and try again later?\n        return e.response.status;\n    } else if (e.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        //probably ECONNRESET or Timeout -> e.code should be set.\n        return e.code;\n    } else {\n        //something else...?\n        return e.code;\n    }\n}\n\nexport abstract class Device extends DeviceInfo {\n    readonly adapter: Mydlink;\n    abstract client: Client;\n    constructor (adapter : Mydlink, ip : string, pin: string, pinEncrypted: boolean) {\n        super(ip, pin, pinEncrypted);\n        this.adapter = adapter;\n    }\n\n    /**\n     * Stores device configuration as Device Object in ioBroker Database.\n     */\n    async createDeviceObject () : Promise<void> {\n        //do something here.\n        if (!this.id) {\n            if (!this.mac) {\n                this.adapter.log.warn('Could not create device ' + this.name + ' without MAC. Please check config or if device is online.');\n                return;\n            }\n        }\n\n        //also set the native part of the device:\n        await this.adapter.extendObjectAsync(this.id, {\n            type: 'device',\n            common: {\n                name: this.name,\n                statusStates: {\n                    onlineId: `${this.adapter.namespace}.${this.id}${Suffixes.reachable}`\n                }\n            } as Partial<ioBroker.DeviceCommon>,\n            native: {\n                ip: this.ip,\n                mac: this.mac,\n                pin: this.pinEncrypted,\n                pollInterval: this.pollInterval,\n                enabled: this.enabled,\n                name: this.name,\n                model: this.model,\n                useWebSocket: this.isWebsocket,\n                pinNotEncrypted: false\n            }\n        });\n    }\n\n    /**\n     * Creates state-objects for the device.\n     */\n    async createObjects() : Promise<void> {\n        //enabled indicator:\n        await this.adapter.setObjectNotExistsAsync(this.id + Suffixes.enabled, {\n            type: 'state',\n            common: {\n                name: 'enabled',\n                type: 'boolean',\n                role: 'indicator',\n                read: true,\n                write: false\n            },\n            native: {}\n        });\n\n        //have ready indicator:\n        await this.adapter.setObjectNotExistsAsync(this.id + Suffixes.unreachable, {\n            type: 'state',\n            common: {\n                name: 'unreach',\n                type: 'boolean',\n                role: 'indicator.maintenance.unreach',\n                read: true,\n                write: false\n            },\n            native: {}\n        });\n\n        //have ready indicator:\n        await this.adapter.setObjectNotExistsAsync(this.id + Suffixes.reachable, {\n            type: 'state',\n            common: {\n                name: 'device is reachable',\n                type: 'boolean',\n                role: 'indicator.reachable',\n                read: true,\n                write: false\n            },\n            native: {}\n        });\n    }\n\n    stop() : void {\n        if (this.intervalHandle) {\n            this.adapter.clearTimeout(this.intervalHandle);\n        }\n        if (this.client && typeof this.client.disconnect === 'function') {\n            this.client.disconnect();\n        }\n        this.ready = false;\n        this.loggedIn = false;\n    }\n\n    /**\n     * Starts log in for device. Needs to be done before additional commands can work.\n     **/\n    async login() : Promise<boolean> {\n        try {\n            const loginResult = await this.client.login();\n            if (loginResult === true) {\n                this.adapter.log.debug(`${this.name} successfully logged in: ${loginResult}`);\n                this.loggedIn = true;\n                this.loginErrorPrinted = false;\n            } else {\n                if (!this.loginErrorPrinted) {\n                    this.loginErrorPrinted = true;\n                    this.loggedIn = false;\n                    this.adapter.log.debug('Login error: device returned ' + loginResult + ' - this should not really happen.');\n                    this.adapter.log.error(this.name + ' could not login. Please check credentials and if device is online/connected.');\n                }\n            }\n        } catch (e : any) {\n            this.adapter.log.debug('Login error: ' + e.stack);\n\n            if (!this.loginErrorPrinted && e.code !== 'ETIMEDOUT' && e.code !== 'ECONNABORTED' && e.code !== 'ECONNRESET') {\n                this.adapter.log.error(this.name + ' could not login. Please check credentials and if device is online/connected. Error: ' + e.code + ' - ' + e.stack);\n                this.loginErrorPrinted = true;\n            }\n\n            this.loggedIn = false;\n            if (!this.pollInterval) { //if no polling takes place, need to retry login!\n                if (this.intervalHandle) {\n                    this.adapter.clearTimeout(this.intervalHandle);\n                }\n                this.intervalHandle = this.adapter.setTimeout(() => this.start(), 10000); //retry here if no polling.\n            }\n        }\n        return this.loggedIn;\n    }\n\n    /**\n     * Identification of device needs to happen after successful login.\n     * Problem: Maybe needs to create new object of new type. Hm...\n     */\n    async identify() : Promise<boolean> {\n        //for device identification by IP set name to model here:\n        if (!this.name) {\n            this.name = this.model;\n        }\n\n        await this.createObjects();\n        this.identified = true;\n        return this.identified;\n    }\n\n    async handleNetworkError(e: any) : Promise<void> {\n        const code = processNetworkError(e);\n        if (code === 403 || this.ready) {\n            this.loggedIn = false; //login next polling.\n        }\n        this.adapter.log.debug('Error during communication ' + this.name + ': ' + code + ' - ' + e.stack + ' - ' + e.body);\n        this.ready = false;\n        await this.adapter.setStateChangedAsync(this.id + Suffixes.unreachable, true, true);\n        await this.adapter.setStateChangedAsync(this.id + Suffixes.reachable, false, true);\n\n        let connected = false;\n        this.adapter.devices.forEach((device) => { connected = connected || device.ready; }); //turn green if at least one device is ready = reachable.\n        await this.adapter.setStateChangedAsync('info.connection', connected, true);\n    }\n\n    /**\n     * Do polling here.\n     * @returns {Promise<void>}\n     */\n    async onInterval() : Promise<void> {\n        //this.log.debug('Polling ' + this.name);\n        try {\n            if (!this.loggedIn) {\n                await this.login();\n            }\n            if (this.loggedIn && !this.identified) {\n                await this.identify();\n            }\n            if (this.loggedIn && this.identified) {\n                this.ready = await this.client.isDeviceReady();\n                await this.adapter.setStateChangedAsync(this.id + Suffixes.unreachable, !this.ready, true);\n                await this.adapter.setStateAsync(this.id + Suffixes.reachable, this.ready, true);\n\n                //prevent more interaction with device and reset connection.\n                if (this.ready) {\n                    //signal that we could at least reach one device:\n                    await this.adapter.setStateChangedAsync('info.connection', true, true);\n                }\n            }\n        } catch (e: any) {\n            await this.handleNetworkError(e);\n        }\n\n        if (this.pollInterval > 0) { //only start timeout again, if set in settings.\n            this.intervalHandle = this.adapter.setTimeout(() => this.onInterval,\n                this.pollInterval);\n        }\n    }\n\n    /**\n     * starting communication with device from config.\n     * @returns {Promise<boolean>}\n     */\n    async start() : Promise<boolean> {\n        //if device was already started -> stop it.\n        //(use case: ip did change or settings did change)\n        this.stop();\n\n        //interrogate enabled devices\n        //this will get MAC for manually configured devices.\n        if (this.enabled) {\n            //login:\n            await this.login();\n            if (this.loggedIn) {\n                try {\n                    await this.identify();\n                    this.ready = await this.client.isDeviceReady();\n                    await this.adapter.setStateAsync(this.id + Suffixes.reachable, this.ready, true);\n                    await this.adapter.setStateAsync(this.id + Suffixes.unreachable, !this.ready, true);\n                } catch (e: any) {\n                    this.adapter.log.error(this.name + ' could not identify device: ' + e.stack);\n                }\n            }\n        }\n\n        //transfer enabled flag to object:\n        await this.adapter.setStateAsync(this.id + Suffixes.enabled, {val: this.enabled, ack: true});\n\n        //start polling if device is enabled (do this after all is setup).\n        let result = false;\n        if (this.enabled) {\n            //some devices, for example W245, don't push.. so poll websocket also.\n            let interval = this.pollInterval;\n            if (interval !== undefined && !Number.isNaN(interval) && interval > 0) {\n                this.adapter.log.debug('Start polling for ' + this.name + ' with interval ' + interval);\n                result = true; //only use yellow/green states if polling at least one device.\n                if (interval < 500) {\n                    this.adapter.log.warn('Increasing poll rate to twice per second. Please check device config.');\n                    interval = 500; //polling twice every second should be enough, right?\n                }\n                if (interval >= 2147483647) {\n                    interval = 2147483646;\n                    this.adapter.log.warn('Poll rate was too high, reduced to prevent issues.');\n                }\n                this.pollInterval = interval;\n                this.intervalHandle = this.adapter.setTimeout(() => this.onInterval,\n                    this.pollInterval);\n            } else {\n                this.pollInterval = 0;\n                this.adapter.log.debug('Polling of ' + this.name + ' disabled, interval was ' + interval + ' (0 means disabled)');\n            }\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * process a state change. Device will just try to switch plug. Childs will have to overwrite this behaviour.\n     * @param _id\n     * @param _state\n     */\n    async handleStateChange(_id : string, _state : ioBroker.State) : Promise<void> {\n        if (this.loggedIn) {\n            await this.login();\n        }\n    }\n\n}\n\n"],
  "mappings": "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",
  "names": []
}
