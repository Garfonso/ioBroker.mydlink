{
  "version": 3,
  "sources": ["../../src/lib/DeviceInfo.ts"],
  "sourcesContent": ["/**\n * Used to encrypt & decrypt pin. Necessary as long as js-controller can't decrypt for us in array structure.\n * @param key\n * @param value\n * @returns string\n */\nfunction encryptDecrypt(key : string, value : string) : string {\n    if (!value || !key) {\n        return value;\n    }\n    let result = '';\n    for (let i = 0; i < value.length; ++i) {\n        result += String.fromCharCode(key[i % key.length].charCodeAt(0) ^ value.charCodeAt(i));\n    }\n    return result;\n}\n\nexport class DeviceInfo {\n    private static secret : string;\n\n    /**\n     * Used to set secret from main.ts -> so we can use it here to decrypt stuff if necessary.\n     * @param secret\n     */\n    static setSecret (secret : string) : void {\n        DeviceInfo.secret = secret;\n    }\n\n    /**\n     * ip of device, might change in dhcp setups\n     */\n    ip: string;\n    /**\n     * pin of device, needed for login. Should be protected.\n     */\n    pinDecrypted = '';\n    /**\n     * pin of device, needed for login. Should be protected.\n     */\n    pinEncrypted = '';\n\n    /**\n     * Set Pin, please supply if it is encrypted or decrypted.\n     * @param pin\n     * @param encrypted\n     */\n    setPin(pin : string, encrypted = false) : void {\n        if (encrypted) {\n            this.pinEncrypted = pin;\n            this.pinDecrypted = encryptDecrypt(DeviceInfo.secret, pin);\n        } else {\n            this.pinEncrypted = encryptDecrypt(DeviceInfo.secret, pin);\n            this.pinDecrypted = pin;\n        }\n    }\n\n    /**\n     * mac of device, used as base for ID. Should not change.\n     */\n    mac = '';\n    /**\n     * id of device, derived from MAC and usable as part of ioBroker object id.\n     */\n    id = '';\n    /**\n     * name of device, used for easier debug output. ;-) Should be derived from user / object settings\n     */\n    name = '';\n    /**\n     * did we log in or do we need to try that again?\n     */\n    loggedIn = false;\n    /**\n     * were we able to identify the device, yet, i.e. determine the model and see if right device is at the IP?\n     */\n    identified = false;\n    /**\n     * device is ready to report / receive commands\n     */\n    ready = false;\n    /**\n     * prevent to print loginError on every poll.\n     */\n    loginErrorPrinted = false;\n    /**\n     * Should we poll? If so, how often?\n     */\n    pollInterval = 30000;\n    /**\n     * handle for the pollInterval. Used to clear it on exit.\n     * (is a timeout handle!!) (might also be used to retry login, even if no polling is enabled!)\n     */\n    intervalHandle: ioBroker.Timeout | undefined = undefined;\n    /**\n     * Model of the device.\n     */\n    model = '';\n    /**\n     * is device enabled? if not -> don't look for it.\n     */\n    enabled = true;\n    /**\n     * How to get rid of that here?? Hm...\n     */\n    isWebsocket = false;\n\n    /**\n     * create id from mac:\n     */\n    idFromMac() : void {\n        this.id = this.mac.toUpperCase().replace(/:/g, '');\n    }\n\n    /**\n     * Create DeviceInfo only from Ip and Pin, old createDeviceFromIpAndPin\n     * @param ip\n     * @param pin\n     * @param pinEncrypted - is the supplied pin encrypted?\n     * @constructor\n     */\n    constructor(ip: string, pin: string, pinEncrypted: boolean) {\n        this.ip = ip;\n        this.setPin(pin, pinEncrypted);\n    }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,eAAe,KAAc,OAAyB;AAC3D,MAAI,CAAC,SAAS,CAAC,KAAK;AAChB,WAAO;AAAA,EACX;AACA,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACnC,cAAU,OAAO,aAAa,IAAI,IAAI,IAAI,QAAQ,WAAW,CAAC,IAAI,MAAM,WAAW,CAAC,CAAC;AAAA,EACzF;AACA,SAAO;AACX;AAEO,MAAM,WAAW;AAAA,EAuGpB,YAAY,IAAY,KAAa,cAAuB;AArF5D,wBAAe;AAIf,wBAAe;AAoBf,eAAM;AAIN,cAAK;AAIL,gBAAO;AAIP,oBAAW;AAIX,sBAAa;AAIb,iBAAQ;AAIR,6BAAoB;AAIpB,wBAAe;AAKf,0BAA+C;AAI/C,iBAAQ;AAIR,mBAAU;AAIV,uBAAc;AAiBV,SAAK,KAAK;AACV,SAAK,OAAO,KAAK,YAAY;AAAA,EACjC;AAAA,EAnGA,OAAO,UAAW,QAAwB;AACtC,eAAW,SAAS;AAAA,EACxB;AAAA,EAoBA,OAAO,KAAc,YAAY,OAAc;AAC3C,QAAI,WAAW;AACX,WAAK,eAAe;AACpB,WAAK,eAAe,eAAe,WAAW,QAAQ,GAAG;AAAA,IAC7D,OAAO;AACH,WAAK,eAAe,eAAe,WAAW,QAAQ,GAAG;AACzD,WAAK,eAAe;AAAA,IACxB;AAAA,EACJ;AAAA,EAuDA,YAAmB;AACf,SAAK,KAAK,KAAK,IAAI,YAAY,EAAE,QAAQ,MAAM,EAAE;AAAA,EACrD;AAcJ;",
  "names": []
}
